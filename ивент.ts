import {
	MessageEmbed,
	Message,
	TextChannel,
	VoiceChannel,
	CollectorFilter,
	User,
	PartialUser,
	MessageReaction,
} from "discord.js";
import moment from "moment";
import { IActiveEventSchema, activeEvents } from "../../db/models/activeEvents";
import { eventsModel } from "../../db/models/eventsModel";
import { mastersBlacklistModel } from "../../db/models/mastersBlacklist";
import {
	ICOMMAND,
	config,
	FUNCS,
	startingEvent,
	customCooldown,
} from "../../settings/utils";

const cmd: ICOMMAND = {
	name: "–∏–≤–µ–Ω—Ç",
	category: "Events",
	desc: "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≤–µ–Ω—Ç–∞",
	cooldown: 5,
	usage: config.PREFIX + "–∏–≤–µ–Ω—Ç",
	permission: "User",
	run: async (client, args, msg) => {
		if (
			(await mastersBlacklistModel.findOne({ uid: msg.author.id })) ||
			msg.member?.roles.cache.has(config.IDS.ROLEIDS.EventBanRoleID)
		) {
			return msg.reply(
				`–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç, —Ç.–∫. –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ "–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤–µ–¥—É—â–∏—Ö". –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏`
			);
		}

		const activeEvent = await activeEvents.findOne({
			master: msg.author.id,
		});

		if (activeEvent) {
			return msg.reply(
				`—É —Ç–µ–±—è —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–≤–µ–Ω—Ç **${
					activeEvent.event.name
				}**. ${
					activeEvent.announceMsgId
						? `–ó–∞–π–¥–∏—Ç–µ –≤ <#${activeEvent.rooms?.voice?.main}> —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –µ–≥–æ`
						: ""
				}`
			);
		}

		if (
			customCooldown.has(msg.author.id) &&
			customCooldown.get(msg.author.id)!.time > new Date().getTime()
		) {
			return msg.reply(
				`–í—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≤–µ–Ω—Ç —á–µ—Ä–µ–∑ ${getMinutes(
					customCooldown.get(msg.author.id)!.time
				)}`
			);
		}

		const messages: string[] = [];
		const eventData = {} as IActiveEventSchema;
		const events = await eventsModel.find();

		const user = msg.author;
		const eventSelection = new MessageEmbed()
			.setColor("PURPLE")
			.setDescription(
				`–í—ã–±–µ—Ä–∏—Ç–µ –∏–≤–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç –µ–≥–æ —Ü–∏—Ñ—Ä—É\n` +
					events
						.map(
							(event, index) => `\`#${index + 1}\` ${event.name}`
						)
						.join("\n") +
					`\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–ø—É—Å–∫–∞ –∏–≤–µ–Ω—Ç–∞ –Ω–∞–ø–∏—Å–∞–≤ "–æ—Ç–º–µ–Ω–∞"`
			);

		if (!events.length) {
			return;
		}

		await msg.channel
			.send(user.toString(), eventSelection)
			.then((m) => messages.push(m.id));

		const filter = (message: Message) => {
			return message.author.id === user.id;
		};

		const eventNumber = await collectAnswer(msg, filter, messages);

		if (!eventNumber || eventNumber === "–æ—Ç–º–µ–Ω–∞") {
			msg.channel
				.send(`${user.toString()} –ó–∞–ø—É—Å–∫ –∏–≤–µ–Ω—Ç–∞ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω`)
				.then((m) => m.delete({ timeout: 10000 }));
			return abortEventStart(msg, user, messages);
		}

		const choosenEvent = events[Number(eventNumber) - 1];
		if (!choosenEvent) {
			msg.channel
				.send(`${user.toString()} –ò–≤–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ`)
				.then((m) => m.delete({ timeout: 10000 }));
			return abortEventStart(msg, user, messages);
		}

		await msg.channel
			.send(
				`${user.toString()} –°–∫–æ–ª—å–∫–æ —Å–ª–æ—Ç–æ–≤? –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç **3** –¥–æ **30**`
			)
			.then((m) => messages.push(m.id));

		const slots = await collectAnswer(msg, filter, messages);
		if (!slots || slots === "–æ—Ç–º–µ–Ω–∞") {
			msg.channel
				.send(`${user.toString()} –ó–∞–ø—É—Å–∫ –∏–≤–µ–Ω—Ç–∞ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω`)
				.then((m) => m.delete({ timeout: 10000 }));
			return abortEventStart(msg, user, messages);
		}
		if (isNaN(Number(slots)) || Number(slots) < 3 || Number(slots) > 30) {
			msg.channel
				.send(`${user.toString()} –í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–ª–æ—Ç–æ–≤`)
				.then((m) => m.delete({ timeout: 10000 }));
			return abortEventStart(msg, user, messages);
		}

		if (choosenEvent.withSite) {
			await msg.channel
				.send(
					`${user.toString()} –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –∏–≤–µ–Ω—Ç`
				)
				.then((m) => messages.push(m.id));

			const site = await collectAnswer(msg, filter, messages);

			if (!site || site === "–æ—Ç–º–µ–Ω–∞") {
				msg.channel
					.send(`${user.toString()} –ó–∞–ø—É—Å–∫ –∏–≤–µ–Ω—Ç–∞ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω`)
					.then((m) => m.delete({ timeout: 10000 }));
				return abortEventStart(msg, user, messages);
			}

			eventData.site = site;
		}

		eventData.event = choosenEvent;
		eventData.slots = Number(slots);
		eventData.startType = 1;
		eventData.master = user.id;

		const parent = msg.guild?.channels.cache.get(
			config.IDS.CHANNELIDS.eventsCategoryID
		);

		let textChannel: TextChannel | undefined;
		let voiceChannel: VoiceChannel | undefined;

		const closeData = eventData.event?.closeData;

		let channels;

		switch (eventData.startType) {
			case 1:
				textChannel = await msg.guild?.channels.create(
					eventData.event?.name!,
					{
						parent: parent!.id,
						type: "text",
					}
				);

				textChannel?.updateOverwrite(user.id, {
					VIEW_CHANNEL: true,
				});

				voiceChannel = await msg.guild?.channels.create(
					eventData.event?.name!,
					{
						parent: parent!.id,
						type: "voice",
						userLimit: eventData.slots,
					}
				);

				voiceChannel?.updateOverwrite(msg.guild!.id, {
					VIEW_CHANNEL: true,
				});

				voiceChannel?.updateOverwrite(user.id, {
					PRIORITY_SPEAKER: true,
				});

				if (closeData?.isClose) {
					channels = await FUNCS.createCloseEventRooms(
						msg.guild!,
						eventData
					);
				}

				const embedInfo = new MessageEmbed()
					.setColor("YELLOW")
					.setImage(eventData.event.eventImage)
					.setDescription(
						`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∏–≤–µ–Ω—Ç **${eventData.event.name}**!` +
							`\n\n–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–∞—Ç—å –≤–µ–¥—É—â–µ–º—É –¥–æ–ø. –±–∞–ª–ª—ã.` +
							`\n–î–ª—è —ç—Ç–æ-–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å \`!–≥–æ–ª\` –∏ –≤—ã–±—Ä–∞—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç **1** –¥–æ **5**.` +
							`\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: *–≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, **1** —Ä–∞–∑ –∑–∞ –∏–≤–µ–Ω—Ç, –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è **5** –º–∏–Ω—É—Ç –Ω–∞ –Ω—ë–º.*`
					);

				const newEmbed = new MessageEmbed()
					.setColor("YELLOW")
					.setTitle("–ö–æ–º–∞–Ω–¥—ã")
					.setDescription(`\n\`!–∏–≤–∑–∞–≤–µ—Ä—à–∏—Ç—å @–ø–æ–±–µ–¥–∏—Ç–µ–ª—å\` (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª) - —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≤–µ–Ω—Ç –∏ –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
					\n\`!–∏–≤—Å—Ç–æ–ø\` - —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≤–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–±—Ä–∞–ª—Å—è
					\n\`!–∫–∏–∫ @user\` - –∫–∏–∫–Ω—É—Ç—å —Å –∏–≤–µ–Ω—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –º–µ—à–∞–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∏–≤–µ–Ω—Ç`);

				await textChannel!.send(embedInfo).then((m) => m.pin());
				await textChannel!
					.send(msg.author.toString(), newEmbed)
					.then((m) => m.pin());

				if (eventData.site) {
					await textChannel
						?.send(
							`–ò–≤–µ–Ω—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º —Å–∞–π—Ç–µ: <${eventData.site}>`
						)
						.then((m) => m.pin());
				}

				const rightnowEmbed = {
					title: `${eventData.event.name} –æ—Ç ${user.username}`,
					color: 15723756,
					description:
						`–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n–ø—Ä—è–º–æ **–°–ï–ô–ß–ê–°** –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –∏–≤–µ–Ω—Ç **${eventData.event.name}**` +
						`\n<:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166><:L_:797862551550427166>`,
					author: {
						name: "–°–µ–π—á–∞—Å",
					},
					image: {
						url: `${eventData.event.eventImage}`,
					},
					fields: [
						{
							name: "üîä –ü–æ–¥–∫–ª—é—á–∏—Ç—Å—è",
							value: `<#${voiceChannel?.id}>`,
							inline: true,
						},
					],
				};

				eventData.rooms = {
					text: {
						main: textChannel!.id,
					},
					voice: {
						main: voiceChannel!.id,
						addional: channels,
					},
				};
				eventData.eventStarted = new Date().getTime();
				eventData.membersData = [];
				eventData.startedByTimedMaster = {
					announceEmbed: rightnowEmbed,
				};

				await activeEvents.create(eventData);
				break;
		}
		bulkDelete(msg, messages);
		msg.channel
			.send(
				`${user.toString()} –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∏–≤–µ–Ω—Ç **${
					eventData.event.name
				}** ‚úÖ`
			)
			.then((m) => m.delete({ timeout: 10000 }));
		const logChannel = msg.guild?.channels.cache.get(
			config.IDS.CHANNELIDS.eventsLogsChannelID
		) as TextChannel;
		const embed = new MessageEmbed().setDescription(
			`–í—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–¥—É—â–∏–π ${msg.author.toString()} –∑–∞–ø—É—Å–∫–∞–µ—Ç **${
				eventData.event.name
			}**`
		);

		const defaultChat = msg.guild!.channels.cache.get(
			config.IDS.CHANNELIDS.GeneralChat
		) as TextChannel;

		defaultChat.send(
			`–í—Ä–µ–º–µ–Ω–Ω—ã–π –≤–µ–¥—É—â–∏–π **${msg.author.username}** –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≤–µ–Ω—Ç <#${
				eventData.rooms!.voice!.main
			}>`
		);

		logChannel.send(embed);
	},
};

async function collectAnswer(
	msg: Message,
	filter: CollectorFilter,
	messages: string[]
): Promise<string | undefined> {
	const collected = await msg.channel.awaitMessages(filter, {
		max: 1,
		time: 1000 * 60 * 3,
	});
	const recievedMsg = collected.first();

	if (!recievedMsg) {
		msg.channel
			.send(`–í—ã –Ω–µ –¥–∞–ª–∏ –æ—Ç–≤–µ—Ç –≤–æ–≤—Ä–µ–º—è.`)
			.then((m) => m.delete({ timeout: 10000 }));
		return "–æ—Ç–º–µ–Ω–∞";
	}

	messages.push(recievedMsg.id);
	if (recievedMsg.content === "–æ—Ç–º–µ–Ω–∞") return "–æ—Ç–º–µ–Ω–∞";
	return recievedMsg.content!;
}

function bulkDelete(msg: Message, messages: string[]) {
	if (msg.channel.type === "text") {
		msg.channel.bulkDelete(messages);
	}
}

function abortEventStart(
	msg: Message,
	user: User | PartialUser,
	messages: string[]
) {
	bulkDelete(msg, messages);
	return startingEvent.delete(user.id);
}

function getMinutes(time: number) {
	const duration = moment.duration(time);
	const minutes = duration.minutes();
	return minutes;
}

export default cmd;
